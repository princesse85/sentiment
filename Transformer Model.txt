{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":10795716,"sourceType":"datasetVersion","datasetId":6699999}],"dockerImageVersionId":30886,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"jupyter":{"source_hidden":true},"execution":{"iopub.status.busy":"2025-02-19T20:12:10.905956Z","iopub.execute_input":"2025-02-19T20:12:10.906228Z","iopub.status.idle":"2025-02-19T20:12:11.224081Z","shell.execute_reply.started":"2025-02-19T20:12:10.906207Z","shell.execute_reply":"2025-02-19T20:12:11.223340Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/sentiment-dataset/e commerce reviews test.csv\n/kaggle/input/sentiment-dataset/e commerce reviews train.csv\n","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"!pip install -q transformers datasets accelerate torch","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-19T20:12:11.224989Z","iopub.execute_input":"2025-02-19T20:12:11.225372Z","iopub.status.idle":"2025-02-19T20:12:15.505941Z","shell.execute_reply.started":"2025-02-19T20:12:11.225349Z","shell.execute_reply":"2025-02-19T20:12:15.504851Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"import torch\nimport pandas as pd\nimport numpy as np\nfrom transformers import DistilBertTokenizerFast, DistilBertForSequenceClassification, Trainer, TrainingArguments\nfrom datasets import Dataset\nfrom sklearn.model_selection import train_test_split\nfrom transformers import DataCollatorWithPadding\n\n\ndevice = torch.device(\"cuda\") if torch.cuda.is_available() else torch.device(\"cpu\")\nprint(f\" Using device: {device}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-19T20:12:15.507932Z","iopub.execute_input":"2025-02-19T20:12:15.508181Z","iopub.status.idle":"2025-02-19T20:12:37.625450Z","shell.execute_reply.started":"2025-02-19T20:12:15.508156Z","shell.execute_reply":"2025-02-19T20:12:37.624434Z"}},"outputs":[{"name":"stdout","text":" Using device: cuda\n","output_type":"stream"}],"execution_count":5},{"cell_type":"code","source":"train_df = pd.read_csv(\"/kaggle/input/sentiment-dataset/e commerce reviews train.csv\")\ntest_df = pd.read_csv(\"/kaggle/input/sentiment-dataset/e commerce reviews test.csv\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-19T20:12:37.626984Z","iopub.execute_input":"2025-02-19T20:12:37.628585Z","iopub.status.idle":"2025-02-19T20:13:15.069395Z","shell.execute_reply.started":"2025-02-19T20:12:37.628540Z","shell.execute_reply":"2025-02-19T20:13:15.068702Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"label_mapping = {\"__label__1\": 0, \"__label__2\": 1}\n\n\ntrain_df[\"labels\"] = train_df[\"labels\"].map(label_mapping)\ntest_df[\"labels\"] = test_df[\"labels\"].map(label_mapping)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-19T20:13:15.070222Z","iopub.execute_input":"2025-02-19T20:13:15.070507Z","iopub.status.idle":"2025-02-19T20:13:15.272374Z","shell.execute_reply.started":"2025-02-19T20:13:15.070478Z","shell.execute_reply":"2025-02-19T20:13:15.271650Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"train_data, val_data = train_test_split(train_df, test_size=0.1, random_state=42)\n\n# Convert back to DataFrames\ntrain_df = pd.DataFrame(train_data)\nval_df = pd.DataFrame(val_data)\n\nprint(f\"✅ Train Size: {len(train_df)}, Validation Size: {len(val_df)}, Test Size: {len(test_df)}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-19T20:13:15.273220Z","iopub.execute_input":"2025-02-19T20:13:15.273438Z","iopub.status.idle":"2025-02-19T20:13:16.594122Z","shell.execute_reply.started":"2025-02-19T20:13:15.273418Z","shell.execute_reply":"2025-02-19T20:13:16.593374Z"}},"outputs":[{"name":"stdout","text":"✅ Train Size: 3240009, Validation Size: 360001, Test Size: 400000\n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"# Convert Pandas DataFrame to Hugging Face Dataset\ntrain_dataset = Dataset.from_pandas(train_df)\nval_dataset = Dataset.from_pandas(val_df)\ntest_dataset = Dataset.from_pandas(test_df)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-19T20:13:16.594908Z","iopub.execute_input":"2025-02-19T20:13:16.595116Z","iopub.status.idle":"2025-02-19T20:13:32.651802Z","shell.execute_reply.started":"2025-02-19T20:13:16.595097Z","shell.execute_reply":"2025-02-19T20:13:32.650833Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"def fix_labels(example):\n    example[\"labels\"] = int(example[\"labels\"])  # Ensures labels are integers\n    return example\n\ntrain_dataset = train_dataset.map(fix_labels)\nval_dataset = val_dataset.map(fix_labels)\ntest_dataset = test_dataset.map(fix_labels)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-19T20:13:32.652665Z","iopub.execute_input":"2025-02-19T20:13:32.652982Z","iopub.status.idle":"2025-02-19T20:16:41.717951Z","shell.execute_reply.started":"2025-02-19T20:13:32.652953Z","shell.execute_reply":"2025-02-19T20:16:41.717068Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/3240009 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"90a432f4447b4ccbada7e996e5c16437"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/360001 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"aa2bcb08c1cb4387b92c266c773640ac"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/400000 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"42584686466a42c198e1c33cfa16e13a"}},"metadata":{}}],"execution_count":10},{"cell_type":"code","source":"tokenizer = DistilBertTokenizerFast.from_pretrained(\"distilbert-base-uncased\")\n\n\ndef tokenize_function(examples):\n    return tokenizer(\n        examples[\"text\"], \n        padding=\"max_length\",\n        truncation=True,\n        max_length=256\n    )\n\n# Apply Tokenization\ntrain_dataset = train_dataset.map(tokenize_function, batched=True, num_proc=1, remove_columns=[\"text\"])\nval_dataset = val_dataset.map(tokenize_function, batched=True, num_proc=1, remove_columns=[\"text\"])\ntest_dataset = test_dataset.map(tokenize_function, batched=True, num_proc=1, remove_columns=[\"text\"])\n\n# Save Tokenized Data to Prevent Re-Tokenization\ntrain_dataset.save_to_disk(\"/kaggle/working/train_tokenized\")\nval_dataset.save_to_disk(\"/kaggle/working/val_tokenized\")\ntest_dataset.save_to_disk(\"/kaggle/working/test_tokenized\")\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-19T20:16:41.720085Z","iopub.execute_input":"2025-02-19T20:16:41.720326Z","iopub.status.idle":"2025-02-19T20:31:20.316346Z","shell.execute_reply.started":"2025-02-19T20:16:41.720304Z","shell.execute_reply":"2025-02-19T20:31:20.315461Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"tokenizer_config.json:   0%|          | 0.00/48.0 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"f87062b856c64f9b93ac05ca7f1cab19"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"vocab.txt:   0%|          | 0.00/232k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"10a2c6628362438dbf0be033e76d1498"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"tokenizer.json:   0%|          | 0.00/466k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"cf2a82370c114dffab5aeb4ca106e8c1"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/483 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"5f0bbb543296452abb956e35da8db879"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/3240009 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"965738046ef641b896dc9fedce953f9b"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/360001 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"e5100ced0a474dce83ac7b48029fe37d"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/400000 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"257759aeac5e43ab812bfa94018559f2"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Saving the dataset (0/9 shards):   0%|          | 0/3240009 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"d3efbb192bed428da3d36e773c6cc5e9"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Saving the dataset (0/1 shards):   0%|          | 0/360001 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"3780b89d75db43079f08fe9028c174d6"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Saving the dataset (0/2 shards):   0%|          | 0/400000 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"ae11a12e37ad4a978d7a02d621abf9fd"}},"metadata":{}}],"execution_count":11},{"cell_type":"code","source":"from datasets import load_from_disk\n\n# Load Tokenizer\ntokenizer = DistilBertTokenizerFast.from_pretrained(\"distilbert-base-uncased\")\n\n# Load Pre-Tokenized Dataset\ntrain_dataset = load_from_disk(\"/kaggle/working/train_tokenized\")\nval_dataset = load_from_disk(\"/kaggle/working/val_tokenized\")\ntest_dataset = load_from_disk(\"/kaggle/working/test_tokenized\")\n\n# Fix Labels\ndef fix_labels(example):\n    example[\"labels\"] = int(example[\"labels\"])\n    return example\n\ntrain_dataset = train_dataset.map(fix_labels)\nval_dataset = val_dataset.map(fix_labels)\ntest_dataset = test_dataset.map(fix_labels)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-19T20:31:20.317410Z","iopub.execute_input":"2025-02-19T20:31:20.317650Z","iopub.status.idle":"2025-02-19T20:35:23.999831Z","shell.execute_reply.started":"2025-02-19T20:31:20.317620Z","shell.execute_reply":"2025-02-19T20:35:23.998851Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/3240009 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"0cf81443964949cf870e81c29e46c526"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/360001 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"4503a857023d4156b287e633b356d342"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/400000 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"71e069b739224d8293a0bcd1fefb51c6"}},"metadata":{}}],"execution_count":12},{"cell_type":"code","source":"# ✅ Remove Unwanted Columns\ncolumns_to_keep = [\"input_ids\", \"attention_mask\", \"labels\"]\ntrain_dataset = train_dataset.remove_columns([col for col in train_dataset.column_names if col not in columns_to_keep])\nval_dataset = val_dataset.remove_columns([col for col in val_dataset.column_names if col not in columns_to_keep])\ntest_dataset = test_dataset.remove_columns([col for col in test_dataset.column_names if col not in columns_to_keep])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-19T20:35:24.001134Z","iopub.execute_input":"2025-02-19T20:35:24.001470Z","iopub.status.idle":"2025-02-19T20:35:24.027856Z","shell.execute_reply.started":"2025-02-19T20:35:24.001439Z","shell.execute_reply":"2025-02-19T20:35:24.027208Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"print(train_dataset[0])\nprint(val_dataset[0])\nprint(test_dataset[0])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-19T20:35:24.028768Z","iopub.execute_input":"2025-02-19T20:35:24.029037Z","iopub.status.idle":"2025-02-19T20:35:24.036965Z","shell.execute_reply.started":"2025-02-19T20:35:24.029009Z","shell.execute_reply":"2025-02-19T20:35:24.036150Z"}},"outputs":[{"name":"stdout","text":"{'labels': 0, 'input_ids': [101, 2053, 2126, 1024, 1045, 4033, 1005, 1056, 2179, 2664, 2505, 2008, 2023, 18027, 2064, 2079, 1012, 1045, 2165, 2009, 2000, 1037, 3232, 1997, 2449, 4440, 1998, 2699, 2000, 5744, 2041, 23277, 28562, 2013, 6471, 1010, 2460, 1010, 1056, 1005, 1055, 1998, 11344, 2007, 2053, 2204, 3463, 1012, 2009, 1005, 1055, 2205, 2172, 2147, 2005, 2200, 2210, 2765, 1012, 1996, 5080, 2003, 2200, 3697, 2000, 2907, 1998, 2448, 2091, 1996, 4253, 1012, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'attention_mask': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}\n{'labels': 1, 'input_ids': [101, 2338, 8068, 1024, 2307, 2338, 999, 2019, 7780, 1012, 1037, 2442, 3191, 2011, 2035, 1012, 2065, 2017, 3191, 1996, 2338, 1998, 2404, 2039, 21519, 2015, 1010, 2115, 2166, 2097, 2022, 2904, 2005, 1996, 2190, 1012, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'attention_mask': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}\n{'labels': 1, 'input_ids': [101, 2307, 3729, 1024, 2026, 8403, 6986, 2038, 2028, 1997, 1996, 2307, 5755, 1997, 2014, 4245, 1012, 1045, 2031, 7791, 2000, 2023, 3729, 2005, 2086, 1998, 1045, 2145, 2293, 2009, 1012, 2043, 1045, 1005, 1049, 1999, 1037, 2204, 6888, 2009, 3084, 2033, 2514, 2488, 1012, 1037, 2919, 6888, 2074, 9345, 17822, 8520, 2066, 5699, 1999, 1996, 4542, 1012, 2023, 3729, 2074, 1051, 18153, 2229, 2166, 1012, 2955, 2024, 18414, 16846, 24646, 4609, 5582, 1998, 4581, 2074, 3102, 1012, 2028, 1997, 2166, 1005, 1055, 5023, 20296, 1012, 2023, 2003, 1037, 5532, 8842, 3729, 1999, 2026, 2338, 1012, 2339, 2016, 2196, 2081, 2009, 2502, 2003, 2074, 3458, 2033, 1012, 2296, 7292, 1045, 2377, 2023, 1010, 2053, 3043, 2304, 1010, 2317, 1010, 2402, 1010, 2214, 1010, 3287, 1010, 2931, 7955, 2758, 2028, 2518, 1000, 2040, 2001, 2008, 4823, 1029, 1000, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'attention_mask': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}\n","output_type":"stream"}],"execution_count":14},{"cell_type":"code","source":"if torch.cuda.is_available():\n    device = \"cuda\"\n    print(\" GPU is available! Running on:\", torch.cuda.get_device_name(0))\nelse:\n    device = \"cpu\"\n    print(\" No GPU detected. Training on CPU (slow).\")\n\n\nmodel = DistilBertForSequenceClassification.from_pretrained(\"distilbert-base-uncased\", num_labels=2)\nmodel.to(device)\n\n# ✅ Define Training Arguments with GPU Optimization\ntraining_args = TrainingArguments(\n    output_dir=\"./distilbert-results\",\n    evaluation_strategy=\"epoch\",\n    save_strategy=\"epoch\",\n    per_device_train_batch_size=128,\n    per_device_eval_batch_size=128,\n    learning_rate=3e-5,\n    num_train_epochs=1,\n    weight_decay=0.01,\n    push_to_hub=False,\n    logging_dir=\"./logs\",\n    logging_steps=500,\n    fp16=True,  \n    report_to=\"none\"\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-19T20:35:24.037868Z","iopub.execute_input":"2025-02-19T20:35:24.038118Z","iopub.status.idle":"2025-02-19T20:35:26.323505Z","shell.execute_reply.started":"2025-02-19T20:35:24.038086Z","shell.execute_reply":"2025-02-19T20:35:26.322494Z"}},"outputs":[{"name":"stdout","text":" GPU is available! Running on: Tesla P100-PCIE-16GB\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"model.safetensors:   0%|          | 0.00/268M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"7ede37174c98414a91e50ba3c611073c"}},"metadata":{}},{"name":"stderr","text":"Some weights of DistilBertForSequenceClassification were not initialized from the model checkpoint at distilbert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight', 'pre_classifier.bias', 'pre_classifier.weight']\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n/usr/local/lib/python3.10/dist-packages/transformers/training_args.py:1575: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of 🤗 Transformers. Use `eval_strategy` instead\n  warnings.warn(\n","output_type":"stream"}],"execution_count":15},{"cell_type":"code","source":"!pip install evaluate","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-19T20:39:07.484439Z","iopub.execute_input":"2025-02-19T20:39:07.484884Z","iopub.status.idle":"2025-02-19T20:39:12.037569Z","shell.execute_reply.started":"2025-02-19T20:39:07.484849Z","shell.execute_reply":"2025-02-19T20:39:12.036683Z"}},"outputs":[{"name":"stdout","text":"Collecting evaluate\n  Downloading evaluate-0.4.3-py3-none-any.whl.metadata (9.2 kB)\nRequirement already satisfied: datasets>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from evaluate) (3.2.0)\nRequirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.10/dist-packages (from evaluate) (1.26.4)\nRequirement already satisfied: dill in /usr/local/lib/python3.10/dist-packages (from evaluate) (0.3.8)\nRequirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from evaluate) (2.2.3)\nRequirement already satisfied: requests>=2.19.0 in /usr/local/lib/python3.10/dist-packages (from evaluate) (2.32.3)\nRequirement already satisfied: tqdm>=4.62.1 in /usr/local/lib/python3.10/dist-packages (from evaluate) (4.67.1)\nRequirement already satisfied: xxhash in /usr/local/lib/python3.10/dist-packages (from evaluate) (3.5.0)\nRequirement already satisfied: multiprocess in /usr/local/lib/python3.10/dist-packages (from evaluate) (0.70.16)\nRequirement already satisfied: fsspec>=2021.05.0 in /usr/local/lib/python3.10/dist-packages (from fsspec[http]>=2021.05.0->evaluate) (2024.9.0)\nRequirement already satisfied: huggingface-hub>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from evaluate) (0.28.1)\nRequirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from evaluate) (24.2)\nRequirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from datasets>=2.0.0->evaluate) (3.17.0)\nRequirement already satisfied: pyarrow>=15.0.0 in /usr/local/lib/python3.10/dist-packages (from datasets>=2.0.0->evaluate) (19.0.0)\nRequirement already satisfied: aiohttp in /usr/local/lib/python3.10/dist-packages (from datasets>=2.0.0->evaluate) (3.11.11)\nRequirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.10/dist-packages (from datasets>=2.0.0->evaluate) (6.0.2)\nRequirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.7.0->evaluate) (4.12.2)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.10/dist-packages (from numpy>=1.17->evaluate) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.10/dist-packages (from numpy>=1.17->evaluate) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.10/dist-packages (from numpy>=1.17->evaluate) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.10/dist-packages (from numpy>=1.17->evaluate) (2025.0.1)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.10/dist-packages (from numpy>=1.17->evaluate) (2022.0.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.10/dist-packages (from numpy>=1.17->evaluate) (2.4.1)\nRequirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests>=2.19.0->evaluate) (3.4.1)\nRequirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests>=2.19.0->evaluate) (3.10)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests>=2.19.0->evaluate) (2.3.0)\nRequirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests>=2.19.0->evaluate) (2025.1.31)\nRequirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas->evaluate) (2.9.0.post0)\nRequirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas->evaluate) (2025.1)\nRequirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas->evaluate) (2025.1)\nRequirement already satisfied: aiohappyeyeballs>=2.3.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets>=2.0.0->evaluate) (2.4.4)\nRequirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets>=2.0.0->evaluate) (1.3.2)\nRequirement already satisfied: async-timeout<6.0,>=4.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets>=2.0.0->evaluate) (5.0.1)\nRequirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets>=2.0.0->evaluate) (25.1.0)\nRequirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets>=2.0.0->evaluate) (1.5.0)\nRequirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets>=2.0.0->evaluate) (6.1.0)\nRequirement already satisfied: propcache>=0.2.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets>=2.0.0->evaluate) (0.2.1)\nRequirement already satisfied: yarl<2.0,>=1.17.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets>=2.0.0->evaluate) (1.18.3)\nRequirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas->evaluate) (1.17.0)\nRequirement already satisfied: intel-openmp>=2024 in /usr/local/lib/python3.10/dist-packages (from mkl->numpy>=1.17->evaluate) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.10/dist-packages (from mkl->numpy>=1.17->evaluate) (2022.0.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.10/dist-packages (from tbb==2022.*->mkl->numpy>=1.17->evaluate) (1.2.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.10/dist-packages (from mkl_umath->numpy>=1.17->evaluate) (2024.2.0)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.10/dist-packages (from intel-openmp>=2024->mkl->numpy>=1.17->evaluate) (2024.2.0)\nDownloading evaluate-0.4.3-py3-none-any.whl (84 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m84.0/84.0 kB\u001b[0m \u001b[31m3.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hInstalling collected packages: evaluate\nSuccessfully installed evaluate-0.4.3\n","output_type":"stream"}],"execution_count":18},{"cell_type":"code","source":"import evaluate\nimport numpy as np\n\n\n\naccuracy_metric = evaluate.load(\"accuracy\")\nf1_metric = evaluate.load(\"f1\")\n\n\ndef compute_metrics(eval_pred):\n    logits, labels = eval_pred\n    predictions = np.argmax(logits, axis=-1)  # Get class with highest probability\n\n    accuracy = accuracy_metric.compute(predictions=predictions, references=labels)\n    f1_score = f1_metric.compute(predictions=predictions, references=labels, average=\"weighted\")\n\n    return {\n        \"accuracy\": accuracy[\"accuracy\"],\n        \"f1_score\": f1_score[\"f1\"]\n    }","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-19T20:40:19.270436Z","iopub.execute_input":"2025-02-19T20:40:19.270766Z","iopub.status.idle":"2025-02-19T20:40:20.568146Z","shell.execute_reply.started":"2025-02-19T20:40:19.270720Z","shell.execute_reply":"2025-02-19T20:40:20.567496Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"Downloading builder script:   0%|          | 0.00/4.20k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"b76bc8d7632d4c7ea4421662eda3572f"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Downloading builder script:   0%|          | 0.00/6.79k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"36b8b2e96b2e46aa88bfef6dcc07b087"}},"metadata":{}}],"execution_count":21},{"cell_type":"code","source":"from transformers import Trainer, DataCollatorWithPadding\n\n# ✅ Use Data Collator\ndata_collator = DataCollatorWithPadding(tokenizer=tokenizer)\n\n# ✅ Initialize Trainer\ntrainer = Trainer(\n    model=model,\n    args=training_args,\n    train_dataset=train_dataset,\n    eval_dataset=val_dataset,\n    data_collator=data_collator,\n    compute_metrics=compute_metrics\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-19T20:40:26.954307Z","iopub.execute_input":"2025-02-19T20:40:26.954619Z","iopub.status.idle":"2025-02-19T20:40:26.980459Z","shell.execute_reply.started":"2025-02-19T20:40:26.954595Z","shell.execute_reply":"2025-02-19T20:40:26.979804Z"}},"outputs":[],"execution_count":22},{"cell_type":"code","source":"# ✅ Train Model\ntrainer.train()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-19T20:40:30.894791Z","iopub.execute_input":"2025-02-19T20:40:30.895128Z","iopub.status.idle":"2025-02-20T06:57:12.295634Z","shell.execute_reply.started":"2025-02-19T20:40:30.895100Z","shell.execute_reply":"2025-02-20T06:57:12.294664Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"\n    <div>\n      \n      <progress value='25313' max='25313' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      [25313/25313 10:16:38, Epoch 1/1]\n    </div>\n    <table border=\"1\" class=\"dataframe\">\n  <thead>\n <tr style=\"text-align: left;\">\n      <th>Epoch</th>\n      <th>Training Loss</th>\n      <th>Validation Loss</th>\n      <th>Accuracy</th>\n      <th>F1 Score</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>1</td>\n      <td>0.089400</td>\n      <td>0.084605</td>\n      <td>0.970533</td>\n      <td>0.970533</td>\n    </tr>\n  </tbody>\n</table><p>"},"metadata":{}},{"execution_count":23,"output_type":"execute_result","data":{"text/plain":"TrainOutput(global_step=25313, training_loss=0.10037729188482562, metrics={'train_runtime': 37000.9793, 'train_samples_per_second': 87.565, 'train_steps_per_second': 0.684, 'total_flos': 2.1459778192601395e+17, 'train_loss': 0.10037729188482562, 'epoch': 1.0})"},"metadata":{}}],"execution_count":23},{"cell_type":"code","source":"# Save the model properly\nmodel.save_pretrained(\"distilbert_model\")\n\n# Save the tokenizer\ntokenizer.save_pretrained(\"distilbert_tokenizer\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T07:01:35.170814Z","iopub.execute_input":"2025-02-20T07:01:35.171157Z","iopub.status.idle":"2025-02-20T07:01:35.804993Z","shell.execute_reply.started":"2025-02-20T07:01:35.171132Z","shell.execute_reply":"2025-02-20T07:01:35.804100Z"}},"outputs":[{"execution_count":26,"output_type":"execute_result","data":{"text/plain":"('distilbert_tokenizer/tokenizer_config.json',\n 'distilbert_tokenizer/special_tokens_map.json',\n 'distilbert_tokenizer/vocab.txt',\n 'distilbert_tokenizer/added_tokens.json',\n 'distilbert_tokenizer/tokenizer.json')"},"metadata":{}}],"execution_count":26},{"cell_type":"code","source":"!pip install gradio\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T07:21:49.520063Z","iopub.execute_input":"2025-02-20T07:21:49.520386Z","iopub.status.idle":"2025-02-20T07:21:53.225106Z","shell.execute_reply.started":"2025-02-20T07:21:49.520356Z","shell.execute_reply":"2025-02-20T07:21:53.223995Z"}},"outputs":[{"name":"stdout","text":"Requirement already satisfied: gradio in /usr/local/lib/python3.10/dist-packages (5.16.2)\nRequirement already satisfied: aiofiles<24.0,>=22.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (22.1.0)\nRequirement already satisfied: anyio<5.0,>=3.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (3.7.1)\nRequirement already satisfied: fastapi<1.0,>=0.115.2 in /usr/local/lib/python3.10/dist-packages (from gradio) (0.115.8)\nRequirement already satisfied: ffmpy in /usr/local/lib/python3.10/dist-packages (from gradio) (0.5.0)\nRequirement already satisfied: gradio-client==1.7.1 in /usr/local/lib/python3.10/dist-packages (from gradio) (1.7.1)\nRequirement already satisfied: httpx>=0.24.1 in /usr/local/lib/python3.10/dist-packages (from gradio) (0.28.1)\nRequirement already satisfied: huggingface-hub>=0.28.1 in /usr/local/lib/python3.10/dist-packages (from gradio) (0.28.1)\nRequirement already satisfied: jinja2<4.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (3.1.4)\nRequirement already satisfied: markupsafe~=2.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (2.1.5)\nRequirement already satisfied: numpy<3.0,>=1.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (1.26.4)\nRequirement already satisfied: orjson~=3.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (3.10.12)\nRequirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from gradio) (24.2)\nRequirement already satisfied: pandas<3.0,>=1.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (2.2.3)\nRequirement already satisfied: pillow<12.0,>=8.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (11.0.0)\nRequirement already satisfied: pydantic>=2.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (2.11.0a1)\nRequirement already satisfied: pydub in /usr/local/lib/python3.10/dist-packages (from gradio) (0.25.1)\nRequirement already satisfied: python-multipart>=0.0.18 in /usr/local/lib/python3.10/dist-packages (from gradio) (0.0.20)\nRequirement already satisfied: pyyaml<7.0,>=5.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (6.0.2)\nRequirement already satisfied: ruff>=0.9.3 in /usr/local/lib/python3.10/dist-packages (from gradio) (0.9.6)\nRequirement already satisfied: safehttpx<0.2.0,>=0.1.6 in /usr/local/lib/python3.10/dist-packages (from gradio) (0.1.6)\nRequirement already satisfied: semantic-version~=2.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (2.10.0)\nRequirement already satisfied: starlette<1.0,>=0.40.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (0.45.3)\nRequirement already satisfied: tomlkit<0.14.0,>=0.12.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (0.13.2)\nRequirement already satisfied: typer<1.0,>=0.12 in /usr/local/lib/python3.10/dist-packages (from gradio) (0.15.1)\nRequirement already satisfied: typing-extensions~=4.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (4.12.2)\nRequirement already satisfied: uvicorn>=0.14.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (0.34.0)\nRequirement already satisfied: fsspec in /usr/local/lib/python3.10/dist-packages (from gradio-client==1.7.1->gradio) (2024.9.0)\nRequirement already satisfied: websockets<15.0,>=10.0 in /usr/local/lib/python3.10/dist-packages (from gradio-client==1.7.1->gradio) (14.1)\nRequirement already satisfied: idna>=2.8 in /usr/local/lib/python3.10/dist-packages (from anyio<5.0,>=3.0->gradio) (3.10)\nRequirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.10/dist-packages (from anyio<5.0,>=3.0->gradio) (1.3.1)\nRequirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/dist-packages (from anyio<5.0,>=3.0->gradio) (1.2.2)\nRequirement already satisfied: certifi in /usr/local/lib/python3.10/dist-packages (from httpx>=0.24.1->gradio) (2025.1.31)\nRequirement already satisfied: httpcore==1.* in /usr/local/lib/python3.10/dist-packages (from httpx>=0.24.1->gradio) (1.0.7)\nRequirement already satisfied: h11<0.15,>=0.13 in /usr/local/lib/python3.10/dist-packages (from httpcore==1.*->httpx>=0.24.1->gradio) (0.14.0)\nRequirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.28.1->gradio) (3.17.0)\nRequirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.28.1->gradio) (2.32.3)\nRequirement already satisfied: tqdm>=4.42.1 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.28.1->gradio) (4.67.1)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.10/dist-packages (from numpy<3.0,>=1.0->gradio) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.10/dist-packages (from numpy<3.0,>=1.0->gradio) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.10/dist-packages (from numpy<3.0,>=1.0->gradio) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.10/dist-packages (from numpy<3.0,>=1.0->gradio) (2025.0.1)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.10/dist-packages (from numpy<3.0,>=1.0->gradio) (2022.0.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.10/dist-packages (from numpy<3.0,>=1.0->gradio) (2.4.1)\nRequirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas<3.0,>=1.0->gradio) (2.9.0.post0)\nRequirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas<3.0,>=1.0->gradio) (2025.1)\nRequirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas<3.0,>=1.0->gradio) (2025.1)\nRequirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.10/dist-packages (from pydantic>=2.0->gradio) (0.7.0)\nRequirement already satisfied: pydantic-core==2.28.0 in /usr/local/lib/python3.10/dist-packages (from pydantic>=2.0->gradio) (2.28.0)\nRequirement already satisfied: click>=8.0.0 in /usr/local/lib/python3.10/dist-packages (from typer<1.0,>=0.12->gradio) (8.1.7)\nRequirement already satisfied: shellingham>=1.3.0 in /usr/local/lib/python3.10/dist-packages (from typer<1.0,>=0.12->gradio) (1.5.4)\nRequirement already satisfied: rich>=10.11.0 in /usr/local/lib/python3.10/dist-packages (from typer<1.0,>=0.12->gradio) (13.9.4)\nRequirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas<3.0,>=1.0->gradio) (1.17.0)\nRequirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.10/dist-packages (from rich>=10.11.0->typer<1.0,>=0.12->gradio) (3.0.0)\nRequirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.10/dist-packages (from rich>=10.11.0->typer<1.0,>=0.12->gradio) (2.19.1)\nRequirement already satisfied: intel-openmp>=2024 in /usr/local/lib/python3.10/dist-packages (from mkl->numpy<3.0,>=1.0->gradio) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.10/dist-packages (from mkl->numpy<3.0,>=1.0->gradio) (2022.0.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.10/dist-packages (from tbb==2022.*->mkl->numpy<3.0,>=1.0->gradio) (1.2.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.10/dist-packages (from mkl_umath->numpy<3.0,>=1.0->gradio) (2024.2.0)\nRequirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub>=0.28.1->gradio) (3.4.1)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub>=0.28.1->gradio) (2.3.0)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.10/dist-packages (from intel-openmp>=2024->mkl->numpy<3.0,>=1.0->gradio) (2024.2.0)\nRequirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.10/dist-packages (from markdown-it-py>=2.2.0->rich>=10.11.0->typer<1.0,>=0.12->gradio) (0.1.2)\n","output_type":"stream"}],"execution_count":37},{"cell_type":"code","source":"import gradio as gr\nimport torch\nfrom transformers import DistilBertForSequenceClassification, DistilBertTokenizerFast\n\n\nmodel = DistilBertForSequenceClassification.from_pretrained(\"/kaggle/working/distilbert_model\")\ntokenizer = DistilBertTokenizerFast.from_pretrained(\"/kaggle/working/distilbert_tokenizer\")\n\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nmodel.to(device)\n\n\ndef predict_sentiment(text):\n    inputs = tokenizer(text, padding=True, truncation=True, return_tensors=\"pt\").to(device)\n\n    model.eval()\n    with torch.no_grad():\n        outputs = model(**inputs)\n        prediction = torch.argmax(outputs.logits, dim=-1).item()\n\n    sentiment = \"😊 Positive\" if prediction == 1 else \"😡 Negative\"\n    return sentiment\n\n\napp = gr.Interface(\n    fn=predict_sentiment,\n    inputs=gr.Textbox(label=\"Enter a Review\", placeholder=\"Type your review here...\"),\n    outputs=gr.Label(label=\"Predicted Sentiment\"),\n    title=\"💬 DistilBERT Sentiment Analysis\",\n    description=\"Enter a review and let DistilBERT classify it as Positive or Negative.\",\n    theme=\"default\",\n)\n\n\napp.launch(share=True) ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T07:22:47.833465Z","iopub.execute_input":"2025-02-20T07:22:47.833875Z","iopub.status.idle":"2025-02-20T07:22:51.783117Z","shell.execute_reply.started":"2025-02-20T07:22:47.833842Z","shell.execute_reply":"2025-02-20T07:22:51.782372Z"}},"outputs":[{"name":"stdout","text":"* Running on local URL:  http://127.0.0.1:7860\n* Running on public URL: https://600bac8c34a80877b0.gradio.live\n\nThis share link expires in 72 hours. For free permanent hosting and GPU upgrades, run `gradio deploy` from the terminal in the working directory to deploy to Hugging Face Spaces (https://huggingface.co/spaces)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"<div><iframe src=\"https://600bac8c34a80877b0.gradio.live\" width=\"100%\" height=\"500\" allow=\"autoplay; camera; microphone; clipboard-read; clipboard-write;\" frameborder=\"0\" allowfullscreen></iframe></div>"},"metadata":{}},{"execution_count":38,"output_type":"execute_result","data":{"text/plain":""},"metadata":{}}],"execution_count":38}]}